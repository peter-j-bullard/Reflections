--Git repositories and directories--

Each Git repository is tied to a specific directory - the directory where you ran git init. Only files from that directory (and subdirectories inside that directory) will be contained in that repository, and you can have different repositories in different directories.

Note: it's often the case that a Git repository in some directory will only contain, or track, some of the files in that directory, rather than all of them. You'll see how this works later this lesson.

If you accidentally add a file to the staging area, you can remove it using git reset. For example, if you accidentally add lesson_2_reflections.txt, but don’t want it to be committed yet, run git reset lesson_2_reflections.txt and the file will be removed from the staging area, but it will still be in your working directory.

git add will add any file you want to the repository

1. How is the staging area different from the working directory and the repository? What value do you think it offers?

It allows for information to be separated from the project.

https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf
use this url to find all commands relative to git

Leave 'detached HEAD' state

Right now, your HEAD should still be 'detached' from Lesson 1 when you checked out an old commit. To fix that, run the command git checkout master. You'll learn more about what this command does later this lesson.

Fix the delay bug

Now, if you were following along with Caroline, you may have already fixed the bug in the Asteroids repository. If not, go ahead and make the change and add it to the staging area now.

In game.js find the statement if (this.delayBeforeBullet <= 0) { (should be on line 423). On the next line, insert this.delayBeforeBullet = 10;

2. How can you use the staging area to make sure you have one commit per logical change?

git status and git diff and git diff --staged

git branch "name" is a way to create multiple branches of code

3. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When I want to try and completely rewrite some code. They would be helpful because I would never be afraid to loose all of my work.

--Viewing the commit history--
The full command Caroline types to see the visual representation of the commit history is git log --graph --oneline master coins.

 git log --graph --oneline master coins

 4. How do the diagrams help you visualize the branch structure?

 The diagrams help to paint a picture of how the graph looks.

 5. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

 Merging two branches creates a master file with two similar branches. 

 6. What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

 Merging manually would take much more time but it would be effective in the fact that the two programs were correctly merged. Git makes merging fast and easy as long as no functions are touched. If that happens git makes it easy for someone to manually make merge changes and then seamlessly switch back to git.